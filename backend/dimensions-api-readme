# `/dimensions` Endpoint — Quick Guide

Fetch exact product dimensions from Wikidata, manufacturer (schema.org), and Wikipedia.

## Route

```
GET /dimensions?id=Q... | q=<text> | urls=<csv>
```

* **id**: Wikidata QID (e.g., `Q12345`).
* **q**: Free‑text query to resolve to a Wikidata item (e.g., `Nintendo Switch Pro Controller`).
* **urls**: Comma‑separated manufacturer/marketplace URLs to parse schema.org `Product` data. Prefer official product pages.

> The service tries Wikidata → manufacturer/schema.org (official site & `urls`) → Wikipedia (infobox) and merges results.

## Response

```json
{
  "id": "Q12345",
  "name": "Example Product",
  "dims_mm": {"L": 152.0, "W": 106.0, "H": 60.0},
  "source": "Wikidata",
  "source_url": "https://www.wikidata.org/wiki/Q12345",
  "confidence": 0.9,
  "evidence": ["SPARQL rows=3 refs_total=1"]
}
```

* All dimensions are **millimetres**. Keys: `L`, `W`, `H`, optional `DIAMETER` or `T` (thickness).

## cURL Examples

> Base URL for local dev: `http://localhost:8000`

### 1) Known Wikidata ID

```bash
curl -s "http://localhost:8000/dimensions?id=Q16952835" | jq
```

### 2) Resolve by search query

```bash
curl -s "http://localhost:8000/dimensions?q=Nintendo%20Switch%20Pro%20Controller" | jq
```

### 3) Prefer manufacturer page via `urls`

```bash
curl -s "http://localhost:8000/dimensions?q=Logitech%20MX%20Master%203S&urls=https%3A%2F%2Fwww.logitech.com%2Fen-us%2Fproducts%2Fmice%2Fmx-master-3s.html" | jq
```

### 4) Known QID + explicit product URL

```bash
curl -s "http://localhost:8000/dimensions?id=Q12345&urls=https%3A%2F%2Fexample.com%2Fproduct%2F123" | jq
```

### 5) Multiple candidate URLs (comma‑separated)

```bash
curl -s "http://localhost:8000/dimensions?q=IKEA%20ALEX%20drawer&urls=https%3A%2F%2Fwww.ikea.com%2F...,https%3A%2F%2Fwww.retailer.example%2F..." | jq
```

## Errors

* `404 Dimensions not found` — No usable dimensions from any provider.
* `422 Validation Error` — Missing/invalid parameters (FastAPI validation).

## Tips & Notes

* **URL‑encode** values in `urls`. In bash, `python -c 'import urllib.parse,sys;print(urllib.parse.quote(sys.argv[1]))' "https://example.com/p"'`
* `extruct` is optional but recommended for parsing schema.org Product data. Install extra deps:

  ```bash
  pip install -r backend/requirements-dimensions.txt
  ```
* Some marketplaces block scraping or omit schema.org; results may then rely on Wikidata/Wikipedia.
* Confidence reflects source reliability and presence of references. The service merges partial dimensions across sources.

## Troubleshooting

* **Got only one dimension?** The page may expose `size` or partial fields; consider adding an official product URL.
* **Inches/feet shown?** The API always normalizes to millimetres.
* **Timeouts**: Try again or pass an alternate URL; some sites are slow.
